import { gql } from '@apollo/client'
import Container from '@components/Container'
import Layout from '@components/Layout'
import Map, { MapEffect } from '@components/Map'
import styles from '@styles/Page.module.scss'
import center from '@turf/center'
import { points } from '@turf/helpers'
import Head from 'next/head'
import { useState } from 'react'
import { FaExternalLinkAlt } from 'react-icons/fa'
import { apolloClient } from 'src/clients/apollo'

export default function Stores({ storeLocations }) {
  const [activeStoreId, setActiveStoreId] = useState()
  console.log('ðŸš€ ~ activeStore', activeStoreId)

  const features = points(
    storeLocations.map(({ location }) => {
      return [location.latitude, location.longitude]
    })
  )

  const [defaultLatitude, defaultLongitude] =
    center(features)?.geometry.coordinates

  function handleStoreClick(storeId) {
    setActiveStoreId(storeId)
  }

  return (
    <Layout>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Container>
        <h1>Locations</h1>

        <div className={styles.stores}>
          <div className={styles.storesLocations}>
            <ul className={styles.locations}>
              {storeLocations.map(
                ({ id, name, address, phoneNumber, location }) => (
                  <li key={id}>
                    <p className={styles.locationName}>{name}</p>
                    <address>{address}</address>
                    <p>{phoneNumber}</p>
                    <p className={styles.locationDiscovery}>
                      <button onClick={() => handleStoreClick(id)}>
                        View on Map
                      </button>
                      <a
                        href={`https://www.google.com/maps/dir//${location.latitude},${location.longitude}/@${location.latitude},${location.longitude},14z`}
                        target="_blank"
                        rel="noreferrer"
                      >
                        Get Directions
                        <FaExternalLinkAlt />
                      </a>
                    </p>
                  </li>
                )
              )}
            </ul>
          </div>

          <div className={styles.storesMap}>
            <div className={styles.storesMapContainer}>
              <Map
                className={styles.map}
                center={[defaultLatitude, defaultLongitude]}
                zoom={12}
                scrollWheelZoom={false}
              >
                {({ TileLayer, Marker, Popup }, map) => {
                  return (
                    <>
                      <MapEffect
                        activeStoreId={activeStoreId}
                        storeLocations={storeLocations}
                      />
                      <TileLayer
                        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                      />
                      {storeLocations.map(
                        ({
                          id,
                          name,
                          address,
                          location: { latitude, longitude },
                        }) => (
                          <Marker position={[latitude, longitude]} key={id}>
                            <Popup>
                              <p>
                                <strong>{name}</strong>
                              </p>
                              <p>{address}</p>
                            </Popup>
                          </Marker>
                        )
                      )}
                    </>
                  )
                }}
              </Map>
            </div>
          </div>
        </div>
      </Container>
    </Layout>
  )
}

export async function getStaticProps() {
  const { data } = await apolloClient.query({
    query: gql`
      query PageStores {
        storeLocations {
          id
          address
          name
          phoneNumber
          location {
            latitude
            longitude
          }
        }
      }
    `,
  })

  const { storeLocations } = data

  return {
    props: {
      storeLocations,
    },
  }
}
